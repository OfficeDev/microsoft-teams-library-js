# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
variables:
- group: InfoSec-SecurityResults
- group: 1CDN-SDF-Secrets
- group: 1CDN-Prod-Secrets

trigger:
  branches:
    include:
      - '2.0-preview'
      - 'release*'
  tags:
    include:
      - 'v*'

pool:
  vmImage: 'windows-latest'

steps:
  - task: YarnInstaller@3
    inputs:
      versionSpec: '1.x'
    displayName: 'Yarn 1.x'

  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install Node.js'

  - task: Yarn@3
    inputs:
      Arguments: 'install'
    displayName: 'yarn install'

  - script: 'node prepNextDevRelease.js'
    workingDirectory: '$(System.DefaultWorkingDirectory)\packages\teams-js'
    condition: and(
      eq(variables['Build.SourceBranch'], 'refs/heads/2.0-preview'),
      in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'),
      ne(variables['Build.Reason'], 'PullRequest'),
      ne(variables['Build.Reason'], 'Manual')
      )
    displayName: 'node prepNextDevRelease.js'

  - task: ESLint@1
    inputs:
      Configuration: 'required'
      TargetType: 'eslint'
      TargetsESLint: '$(Build.SourcesDirectory)/**/*.{js,jsx,ts,tsx}'
      ErrorLevel: 'warn'
    displayName: 'Run ESLint'

  - task: Yarn@3
    inputs:
      Arguments: 'build'
    displayName: 'yarn build'

  - task: Yarn@3
    inputs:
      Arguments: 'test'
    displayName: 'yarn test'

  - task: Yarn@2
    inputs:
      Arguments: 'bundleAnalyze:collect'
    displayName: 'Run bundle analysis and collect'

  # Bundle analysis comparison : should trigger only by PR against 2.0-preview
  # Adding comment for a commit that should queue the pipeline with a PR trigger

  - bash: 'node --max-old-space-size=4096 tools/cli/compareBundleAnalysis.js --commitId=$(System.PullRequest.SourceCommitId) --orgUrl=$(System.CollectionUri) --projectName=$(System.TeamProject) --buildId=$(System.DefinitionId) --bundleArtifactName=$(bundleArtifactName) --baseBranchName=$(System.PullRequest.TargetBranch)'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    condition: and(
      in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'),
      eq(variables['Build.Reason'], 'PullRequest'),
      eq(variables['System.PullRequest.TargetBranch'], '2.0-preview'))
    name: bundleAnalysisTask
    displayName: 'Analyze bundles against 2.0-preview and output result'

  - task: GitHubComment@0
    condition: and(
      in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'),
      eq(variables['Build.Reason'], 'PullRequest'),
      eq(variables['System.PullRequest.TargetBranch'], '2.0-preview'))
    inputs:
      gitHubConnection: '$(RepoGitHubConnection)'
      repositoryName: '$(Build.Repository.Name)'
      id: '$(System.PullRequest.PullRequestNumber)'
      comment: '$(bundleAnalysisTask.bundleAnalysisComment)'
    displayName: 'Post bundle analysis result as PR comment in github'

  - task: PublishBuildArtifacts@1
    condition: and(
      in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'),
      ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      PathtoPublish: './common/temp/bundleAnalysis'
      ArtifactName: '$(bundleArtifactName)'
    displayName: 'Publish bundle analysis'

  - task: ComponentGovernanceComponentDetection@0
    condition: and(
      eq(variables['Build.Reason'], 'PullRequest'),
      eq(variables['System.PullRequest.TargetBranch'], '2.0-preview'))
    inputs:
      scanType: 'LogOnly'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'
      failOnAlert: true
    displayName: 'Security check - Component Governance (Pull Request)'

  - task: ComponentGovernanceComponentDetection@0
    condition: and(
      or(eq(variables['Build.SourceBranch'], 'refs/heads/2.0-preview'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v')),
      ne(variables['Build.Reason'], 'PullRequest'))
    displayName: 'Security check - Component Governance (2.0-preview, release)'

  - task: CredScan@3
    condition: succeededOrFailed()
    displayName: 'Run Credential Scanner'
    inputs:
      debugMode: false
      suppressionsFile: '.sdl\CredScanSuppressions.json'

  - task: PublishSecurityAnalysisLogs@3
    inputs:
      ArtifactName: 'CodeAnalysisLogs'
      ArtifactType: 'M365'
      AllTools: true
      ToolLogsNotFoundAction: 'Standard'
    condition: succeededOrFailed()
    displayName: 'Publish Guardian Artifacts 2'

  - task: CopyFiles@2
    inputs:
      sourceFolder: 'apps/teams-test-app/build'
      contents: '**'
      targetFolder: '$(Build.ArtifactStagingDirectory)\teams-test-app'
    displayName: 'Copy Test app to artifacts staging directory'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\teams-test-app'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)\teams-test-app\$(Build.BuildId).zip'
      replaceExistingArchive: true
    displayName: 'Zip Test app artifacts'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\teams-test-app\$(Build.BuildId).zip'
      ArtifactName: 'teams-test-app'
    displayName: 'Publish Test app artifacts'

  # Retaining artifacts using Arrow service (https://aka.ms/m365sdlonboardingâ€‹)
  - task: AssetRetention@3
    inputs:
      ArrowServiceConnection: '$(ArrowConnection)'
      AssetGroupName: '$(System.TeamProject)_$(Build.DefinitionName)'
      AssetNumber: '$(Build.BuildId)'
      IsShipped: true # This setting will ensure the artifacts are retained more than 548 days as per compliance, more details https://microsoft.sharepoint.com/teams/M365Security/EngSec/SitePages/How-to-make-sure-your-SDL-results-are-retained.aspx
      DropsToRetain: 'CodeAnalysisLogs'
    condition: and(
      startsWith(variables['Build.SourceBranch'], 'refs/tags/v'),
      in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'),
      ne(variables['Build.Reason'], 'PullRequest'),
      ne(variables['Build.Reason'], 'Manual')
      )
    displayName: 'Artifact Retention(Arrow)'

  - task: PostAnalysis@2
    condition: succeededOrFailed()
    displayName: 'Guardian Break'
    inputs:
      GdnBreakPolicyMinSev: Warning
      GdnBreakAllTools: true
      GdnBreakGdnToolCredScan: true
      GdnBreakGdnToolCredScanSeverity: Warning
      GdnBreakGdnToolESLint: true
      GdnBreakGdnToolESLintSeverity: Warning
      GdnBreakPolicy: M365  

  - task: AzureRmWebAppDeployment@4
    condition: and(
      in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'),
      startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: '$(AzureSubscription)'
      appType: 'webApp'
      WebAppName: 'musicalsink'
      package: '$(Build.ArtifactStagingDirectory)\teams-test-app\$(Build.BuildId).zip'
    displayName: 'Deploy to musicalsink'

  - task: AzureRmWebAppDeployment@4
    condition: and(
      in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'),
      eq(variables['Build.SourceBranch'], 'refs/heads/2.0-preview'))
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: '$(AzureSubscription)'
      appType: 'webApp'
      WebAppName: 'cloudroll'
      package: '$(Build.ArtifactStagingDirectory)\teams-test-app\$(Build.BuildId).zip'
    displayName: 'Deploy to cloudroll'

  # TODO - delete after release pipeline creation
  - task: CmdLine@1
    condition: and(
      or(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), eq(variables['Build.SourceBranch'], 'refs/heads/2.0-preview')),
      in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'),
      ne(variables['Build.Reason'], 'PullRequest'),
      ne(variables['Build.Reason'], 'Manual'))
    inputs:
      filename: node
      arguments: publish.js
      workingFolder: '$(System.DefaultWorkingDirectory)\packages\teams-js'
      failOnStandardError: true
    displayName: 'Publish Npm Package'

  - powershell: |
      $npmVer=$(node -p "require('./packages/teams-js/package.json').version") 
      Write-Host "##vso[task.setvariable variable=Version;isOutput=true]$npmVer"
    displayName: 'Set package.Version Variable'
    name: package

  - task: CopyFiles@2
    inputs:
      sourceFolder: 'packages\teams-js\dist'
      contents: '**\?(*.js|*.ts|*.map)'
      targetFolder: '$(Build.ArtifactStagingDirectory)\CDNFeed\js'
    displayName: 'Copy TeamsJS Content for CDN'
  
  - task: CopyFiles@2
    inputs:
      Contents: |
        packages\teams-js\package.json
        packages\teams-js\README.md
        LICENSE
      TargetFolder: '$(Build.ArtifactStagingDirectory)\NPMFeed'
      flattenFolders: true
    displayName: 'Copy TeamsJS Content for NPM'
  
  - task: CopyFiles@2
    inputs:
      Contents: |
        packages\teams-js\dist\**\?(*.js|*.ts|*.map)
      TargetFolder: '$(Build.ArtifactStagingDirectory)\NPMFeed\dist'
      flattenFolders: true
    displayName: 'Copy JS Content for NPM'

  - task: CopyFiles@2
    inputs:
      Contents: |
        packages\teams-js\publish.js
      TargetFolder: '$(Build.ArtifactStagingDirectory)\Scripts'
      flattenFolders: true
    displayName: 'Copy publish.js Script for NPM'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\CDNFeed'
      ArtifactName: 'CDNFeed'
    displayName: 'Publish CDN feed to build Artifacts'
  
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\NPMFeed'
      ArtifactName: 'NPMFeed'
    displayName: 'Publish NPM feed to Build Artifacts'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\Scripts'
      ArtifactName: 'Scripts'
    displayName: 'Publish Scripts to Build Artifacts'

  # This task will push content to CDN-sdf for every commit to 2.0-preview
  # Sample CDN-sdf URL: https://res-1-sdf.cdn.office.net/teams-js/2.0.0-beta.0/js/MicrosoftTeams.min.js
  - task: M365CdnAssetsUpload@1
    condition: and(
      eq(variables['Build.SourceBranch'], 'refs/heads/2.0-preview'),
      in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'),
      ne(variables['Build.Reason'], 'PullRequest'),
      ne(variables['Build.Reason'], 'Manual')
      )
    inputs:
     SourcePath: '$(Build.ArtifactStagingDirectory)\CDNFeed\$(package.Version)'
     ConnectionType: 'EnvironmentVariables'
     Environment: 'PublicCloudSDF'
     ContainerName: 'teams-js'
     AdditionalArgumentsForBlobCopy: '--overwrite=false --log-level=INFO --recursive'
    env:
      M365CDN_APP_ID: $(M365-APP-CLIENT-ID)
      M365CDN_APP_KEY: $(M365-APP-SECRET)
      M365CDN_TENANT_ID: $(M365-APP-TENNANT-ID)
    displayName: 'Push TeamsJS to M365 1CDN(SDF) for (2.0-preview CI/CD)'

  # This task will push content to CDN-Prod for every prod release.
  # Sample CDN URL: https://res.cdn.office.net/teams-js/2.0.0-beta.0/js/MicrosoftTeams.min.js
  - task: M365CdnAssetsUpload@1
    condition: and(
      startsWith(variables['Build.SourceBranch'], 'refs/tags/v'),
      in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'),
      ne(variables['Build.Reason'], 'PullRequest'),
      ne(variables['Build.Reason'], 'Manual')
      )
    inputs:
      SourcePath: '$(Build.ArtifactStagingDirectory)\CDNFeed\$(package.Version)'
      ConnectionType: 'EnvironmentVariables'
      Environment: 'PublicCloud'
      ContainerName: 'teams-js'
      AdditionalArgumentsForBlobCopy: '--overwrite=false --log-level=INFO --recursive'
    env:
      M365CDN_APP_ID: $(M365-CDN-CLIENT-ID-PROD)
      M365CDN_APP_KEY: $(M365-CDN-CLIENT-SECRET-PROD)
      M365CDN_TENANT_ID: $(M365-APP-TENNANT-ID)
    displayName: 'Push TeamsJS to M365 1CDN(Prod) for (2.0-preview release)'