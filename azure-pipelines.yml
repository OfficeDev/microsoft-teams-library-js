variables:
  - group: InfoSec-SecurityResults
  - name: products
    value: 6eff390d-80c0-4456-81b6-6abafa71e768
  - name: tags
    value: production
trigger:
  branches:
    include:
      - 'main'
      - 'release/*'
resources:
  repositories:
    - repository: CustomPipelineTemplates
      type: git
      name: OE/OfficePipelineTemplates
      ref: refs/heads/main
    - repository: AppHostingSdk
      type: git
      name: ISS/metaos-hub-sdk
      ref: refs/heads/main
    - repository: AndroidAppHostingSdk
      type: git
      name: ISS/metaos-hub-sdk-android
    - repository: IOSAppHostingSdk
      type: git
      name: ISS/metaos-hub-sdk-ios
extends:
  template: v1/Office.Official.PipelineTemplate.yml@CustomPipelineTemplates
  parameters:
    pool:
      name: Azure-Pipelines-1ESPT-ExDShared
      image: windows-2022
      os: windows
    sdl:
      eslint:
        configuration: 'required'
        parser: '@typescript-eslint/parser'
        parserOptions: 'ecmaFeatures:{jsx:true}\necmaVersion:12\nsourceType:module\nproject:$(Build.SourcesDirectory)/tsconfig.common.json'
        enableExclusions: true
        exclusionPatterns": "*.d.ts\n*.spec.js\n*.spec.jsx\n*.spec.ts\n*.spec.tsx\n*.test.ts\n*.test.tsx"
        customEnvironments: true
        environmentsBrowser: true
        environmentsNode: true
        environmentsCommonJs: true
        environmentsSharedNodeBrowser: false
        environmentsEs6: false
        environmentsEs2017: false
        environmentsEs2020: true
        environmentsJest: false
      sourceRepositoriesToScan:
        include:
          - repository: AppHostingSdk
          - repository: AndroidAppHostingSdk
          - repository: IOSAppHostingSdk
    customBuildTags:
      - ES365AIMigrationTooling
    stages:
      - stage: __default
        jobs:
          - job: Security
            displayName: 'Security Tasks'
            steps:
              - task: ESLint@1
                displayName: 'Run ESLint'
                inputs:
                  Configuration: 'required'
                  TargetType: 'eslint'
                  TargetsESLint: '$(Build.SourcesDirectory)/**/*.{js,jsx,ts,tsx}'
                  Parser: '@typescript-eslint/parser'
                  ParserOptions: |
                    sourceType:module
                    ecmaVersion:2018
                  ErrorLevel: 'warn'
                  ExitOnFatalError: true
              - task: CredScan@3
                displayName: 'Run Credential Scanner'
                condition: succeededOrFailed()
                inputs:
                  debugMode: false
                  suppressionsFile: '.sdl\CredScanSuppressions.json'
              - task: PublishSecurityAnalysisLogs@3
                inputs:
                  ArtifactName: 'CodeAnalysisLogs'
                  ArtifactType: 'M365'
                  AllTools: true
                  ToolLogsNotFoundAction: 'Standard'
                condition: succeededOrFailed()
                displayName: 'Publish Guardian Artifacts 2'
              - task: AssetRetention@3
                inputs:
                  ArrowServiceConnection: '$(ArrowConnection)'
                  AssetGroupName: '$(System.TeamProject)_$(Build.DefinitionName)'
                  AssetNumber: '$(Build.BuildId)'
                  IsShipped: false
                  DropsToRetain: 'CodeAnalysisLogs'
                condition: and( or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')), ne(variables['Build.Reason'], 'PullRequest') )
                displayName: 'Artifact Retention(Arrow)'
              - task: PostAnalysis@2
                condition: succeededOrFailed()
                displayName: 'Guardian Break'
                inputs:
                  GdnBreakPolicyMinSev: Warning
                  GdnBreakAllTools: true
                  GdnBreakGdnToolCredScan: true
                  GdnBreakGdnToolCredScanSeverity: Warning
                  GdnBreakGdnToolESLint: true
                  GdnBreakGdnToolESLintSeverity: Warning
                  GdnBreakPolicy: M365
              - task: ComponentGovernanceComponentDetection@0
                condition: eq(variables['Build.Reason'], 'PullRequest')
                inputs:
                  scanType: 'LogOnly'
                  verbosity: 'Verbose'
                  alertWarningLevel: 'High'
                  failOnAlert: true
                displayName: 'Component Governance (Pull Request)'
              - task: ComponentGovernanceComponentDetection@0
                condition: and( or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')), ne(variables['Build.Reason'], 'PullRequest'))
                displayName: 'Component Governance (main, release)'
          - job: Build
            displayName: 'Build Test Publish'
            steps:
              - task: NodeTool@0
                displayName: 'Install Node.js'
                inputs:
                  versionSpec: '14.x'
              - task: CmdLine@2
                displayName: 'Setup pnpm'
                inputs:
                  script: |
                    npm install -g pnpm@7.30.1
                    pnpm config set store-dir $(Pipeline.Workspace)/.pnpm-store
              - task: CmdLine@2
                displayName: 'Install repo dependencies'
                inputs:
                  script: |
                    pnpm install
              - task: CmdLine@2
                displayName: 'Check that changefile was created if needed'
                condition: and( eq(variables['Build.Reason'], 'PullRequest'), not(startsWith(variables['System.PullRequest.SourceBranch'], 'release/')), not(startsWith(variables['System.PullRequest.TargetBranch'], 'release/')) )
                inputs:
                  script: 'node enforceBeachball.js'
              - task: CmdLine@2
                displayName: 'node prepBetaRelease.js'
                condition: and( eq(variables['Build.SourceBranch'], 'refs/heads/main'), in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'), ne(variables['Build.Reason'], 'PullRequest') )
                inputs:
                  script: 'node prepBetaRelease.js'
                  workingDirectory: '$(System.DefaultWorkingDirectory)\packages\teams-js'
              - task: CmdLine@2
                displayName: 'pnpm build'
                inputs:
                  script: |
                    pnpm build-force-blazor
              - task: CmdLine@2
                displayName: 'pnpm test'
                inputs:
                  script: |
                    pnpm test
              - task: PublishTestResults@2
                inputs:
                  searchFolder: '$(System.DefaultWorkingDirectory)\packages'
                  testResultsFormat: 'JUnit'
                  testResultsFiles: '**/unit-tests-report*.xml'
                  testRunTitle: 'Unit Tests'
                condition: succeededOrFailed()
              - task: CmdLine@2
                displayName: 'Run bundle analysis and collect'
                inputs:
                  script: |
                    pnpm bundleAnalyze:collect
              - task: Bash@3
                env:
                  SYSTEM_ACCESSTOKEN: $(System.AccessToken)
                condition: and( in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'), eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.PullRequest.TargetBranch'], 'main'))
                name: bundleAnalysisTask
                displayName: 'Analyze bundles against main and output result'
                inputs:
                  targetType: inline
                  script: 'node --max-old-space-size=4096 tools/cli/compareBundleAnalysis.js --commitId=$(System.PullRequest.SourceCommitId) --orgUrl=$(System.CollectionUri) --projectName=$(System.TeamProject) --buildId=$(System.DefinitionId) --bundleArtifactName=$(bundleArtifactName) --baseBranchName=$(System.PullRequest.TargetBranch)'
              - task: PowerShell@2
                name: package
                displayName: 'Set package.version Variable'
                inputs:
                  targetType: inline
                  script: |
                    $npmVer=$(node -p "require('./packages/teams-js/package.json').version")
                    Write-Host "##vso[task.setvariable variable=version;isOutput=true]$npmVer"
              - task: CopyFiles@2
                inputs:
                  sourceFolder: 'apps/teams-test-app/build'
                  contents: '**'
                  targetFolder: '$(Build.ArtifactStagingDirectory)\teams-test-app'
                displayName: 'Copy Test app to artifacts staging directory'
              - task: ArchiveFiles@2
                inputs:
                  rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\teams-test-app'
                  includeRootFolder: false
                  archiveType: 'zip'
                  archiveFile: '$(Build.ArtifactStagingDirectory)\teams-test-app\$(Build.BuildId).zip'
                  replaceExistingArchive: true
                displayName: 'Zip Test app artifacts'
              - task: CopyFiles@2
                inputs:
                  sourceFolder: 'packages\teams-js\dist'
                  contents: '**\?(*.js|*.ts|*.map)'
                  targetFolder: '$(Build.ArtifactStagingDirectory)\CDNFeed\$(package.version)\js'
                displayName: 'Copy TeamsJS Content for CDN'
              - task: CopyFiles@2
                inputs:
                  Contents: |
                    packages\teams-js\package.json
                    packages\teams-js\README.md
                    LICENSE
                  TargetFolder: '$(Build.ArtifactStagingDirectory)\NPMFeed'
                  flattenFolders: true
                displayName: 'Copy TeamsJS Content for NPM'
              - task: CopyFiles@2
                inputs:
                  Contents: |
                    packages\teams-js\dist\**\?(*.js|*.ts|*.map)
                  TargetFolder: '$(Build.ArtifactStagingDirectory)\NPMFeed\dist'
                  flattenFolders: true
                displayName: 'Copy JS Content for NPM'
              - task: CopyFiles@2
                inputs:
                  Contents: |
                    packages\teams-js\scripts\*.ps1
                  TargetFolder: '$(Build.ArtifactStagingDirectory)\scripts'
                  flattenFolders: true
                displayName: 'Copy Power Shell scripts to scripts'
            templateContext:
              outputs:
                - output: pipelineArtifact
                  displayName: 'Publish bundle analysis'
                  condition: and( in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues'), eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.PullRequest.TargetBranch'], 'main'))
                  targetPath: './common/temp/bundleAnalysis'
                  artifactName: '$(bundleArtifactName)'
                - output: pipelineArtifact
                  displayName: 'Publish Test app artifacts'
                  targetPath: '$(Build.ArtifactStagingDirectory)\teams-test-app\$(Build.BuildId).zip'
                  artifactName: 'teams-test-app'
                  sbomBuildDropPath: '$(Build.ArtifactStagingDirectory)\teams-test-app'
                  sbomPackageName: 'teamstestappArtifact'
                - output: pipelineArtifact
                  displayName: 'Publish CDN feed to build Artifacts'
                  targetPath: '$(Build.ArtifactStagingDirectory)\CDNFeed'
                  artifactName: 'CDNFeed'
                - output: pipelineArtifact
                  displayName: 'Publish NPM feed to Build Artifacts'
                  targetPath: '$(Build.ArtifactStagingDirectory)\NPMFeed'
                  artifactName: 'NPMFeed'
                - output: pipelineArtifact
                  displayName: 'Publish Powershell Scripts to Build Artifacts'
                  targetPath: '$(Build.ArtifactStagingDirectory)\scripts'
                  artifactName: 'scripts'
          - job: E2ETest1
            displayName: 'E2E Test - Perf'
            pool:
              name: Azure-Pipelines-1ESPT-ExDShared
              image: 'ubuntu-latest'
              os: linux
            steps:
              - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
                inputs:
                  repository: self
              - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
                inputs:
                  repository: AppHostingSdk
                  persistCredentials: true
              - task: CmdLine@2
                displayName: 'Fix Chrome browser on V116'
                inputs:
                  script: |
                    if command -v google-chrome &> /dev/null; then
                      # Uninstall the existing Chrome
                      sudo apt remove google-chrome-stable --purge -y
                    else
                      echo "Google Chrome is not installed on your system."
                    fi
                    CHROME_VERSION="116.0.5845.179"
                    # Download the specific Chrome version package
                    wget https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION}-1_amd64.deb
                    # Install the downloaded package
                    sudo dpkg -i google-chrome-stable_${CHROME_VERSION}-1_amd64.deb
                    # Update package dependencies
                    sudo apt install -f -y
                    echo "Google Chrome version ${CHROME_VERSION} has been installed."
                    rm google-chrome-stable_${CHROME_VERSION}-1_amd64.deb
              - task: NodeTool@0
                inputs:
                  versionSpec: '14.x'
                displayName: 'Install Node.js'
              - task: Cache@2
                inputs:
                  key: 'pnpm_v1 | "$(Agent.OS)" | $(AppHostingSdkProjectDirectory)/pnpm-lock.yaml'
                  path: $(Pipeline.Workspace)/.pnpm-store
                displayName: Cache app host node_modules pnpm
              - task: Cache@2
                inputs:
                  key: 'pnpm_v1 | "$(Agent.OS)" | $(ClientSdkProjectDirectory)/pnpm-lock.yaml'
                  path: $(Pipeline.Workspace)/.pnpm-store
                displayName: Cache client sdk node_modules pnpm
              - task: CmdLine@2
                displayName: 'Setup pnpm'
                inputs:
                  script: |
                    corepack enable
                    corepack prepare pnpm@7.30.1 --activate
                    pnpm config set store-dir $(Pipeline.Workspace)/.pnpm-store
              - task: Cache@2
                inputs:
                  key: 'cy_v1 | "$(Agent.OS)" | $(AppHostingSdkProjectDirectory)/pnpm-lock.yaml'
                  path: /home/cloudtest/.cache/Cypress
                  cacheHitVar: CYPRESS_CACHE_RESTORED
                displayName: 'Cache Cypress binary'
              - task: npmAuthenticate@0
                inputs:
                  workingFile: '$(AppHostingSdkProjectDirectory)/.npmrc'
              - task: CmdLine@2
                displayName: Install app hosting dependencies (skip Cypress install)
                condition: eq(variables.CYPRESS_CACHE_RESTORED, 'true')
                inputs:
                  script: |
                    CYPRESS_INSTALL_BINARY=0 pnpm install --frozen-lockfile
                  workingDirectory: '$(AppHostingSdkProjectDirectory)'
              - task: CmdLine@2
                displayName: Install app hosting dependencies (include Cypress install)
                condition: eq(variables.CYPRESS_CACHE_RESTORED, 'false')
                inputs:
                  script: |
                    rm -rf $(pnpm store path)
                    pnpm install --frozen-lockfile
                  workingDirectory: '$(AppHostingSdkProjectDirectory)'
              - task: CmdLine@2
                displayName: 'Build app hosting sdk'
                inputs:
                  script: |
                    pnpm build
                  workingDirectory: '$(AppHostingSdkProjectDirectory)'
              - task: CmdLine@2
                displayName: 'Install client sdk dependencies'
                inputs:
                  script: |
                    pnpm install
                  workingDirectory: '$(ClientSdkProjectDirectory)'
              - task: CmdLine@2
                displayName: 'Build client sdk'
                inputs:
                  script: |
                    pnpm build-force-blazor
                  workingDirectory: '$(ClientSdkProjectDirectory)'
              - task: CmdLine@2
                displayName: 'Configure host machine'
                inputs:
                  script: |
                    sudo chmod -R 755 ./
                    pnpm run setup
                  workingDirectory: '$(AppHostingSdkProjectDirectory)'
              - task: Bash@3
                displayName: 'Run E2E Perf tests'
                condition: succeeded()
                inputs:
                  targetType: inline
                  script: 'node tools/cli/runAppsWithE2ETests.js --appUrl=https://localhost:4002 --reportFileName=e2e-tests-report-perf --envType=perf'
                  workingDirectory: '$(AppHostingSdkProjectDirectory)'
              - task: PublishTestResults@2
                inputs:
                  testResultsFormat: 'JUnit'
                  testResultsFiles: '**/e2e-tests-report*.xml'
                  testRunTitle: 'E2E Tests - Perf'
                  mergeTestResults: true
                condition: succeededOrFailed()
          - job: E2ETestAndroid
            displayName: 'E2E Test - Android'
            pool:
              name: Azure Pipelines
              image: internal-macos12
              os: macOS
            steps:
              - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
                inputs:
                  repository: self
              - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
                inputs:
                  repository: AndroidAppHostingSdk
                  path: androidHost
                  persistCredentials: true
              - task: NodeTool@0
                inputs:
                  versionSpec: '14.x'
                displayName: 'Install Node.js'
              - task: Cache@2
                inputs:
                  key: 'pnpm | "$(Agent.OS)" | $(ClientSdkProjectDirectory)/pnpm-lock.yaml'
                  path: $(Pipeline.Workspace)/.pnpm-store
                displayName: Cache pnpm
              - task: CmdLine@2
                displayName: 'Setup pnpm'
                inputs:
                  script: |
                    corepack enable
                    corepack prepare pnpm@7.30.1 --activate
                    pnpm config set store-dir $(Pipeline.Workspace)/.pnpm-store
              - task: CmdLine@2
                displayName: 'Install client sdk dependencies'
                inputs:
                  script: |
                    pnpm install
                  workingDirectory: '$(ClientSdkProjectDirectory)'
              - task: CmdLine@2
                displayName: 'Build client sdk'
                inputs:
                  script: |
                    pnpm build-force-blazor
                  workingDirectory: '$(ClientSdkProjectDirectory)'
              - task: Bash@3
                displayName: 'Run sample test app in background'
                inputs:
                  targetType: inline
                  script: 'nohup pnpm start-test-app &'
                  workingDirectory: '$(ClientSdkProjectDirectory)'
              - task: Bash@3
                displayName: 'Install Emulator'
                inputs:
                  targetType: inline
                  script: 'chmod u+x install_emulator.sh && ./install_emulator.sh'
                  workingDirectory: '$(Agent.BuildDirectory)/androidHost/devtools/ci'
                  # This task is flaky, but when it works it almost always completes in under 5 minutes.
                  # Setting the timeout to 10 minutes so we can fail faster when it fails.
                  timeoutInMinutes: 10
              - task: JavaToolInstaller@0
                inputs:
                  versionSpec: '17'
                  jdkArchitectureOption: 'x64'
                  jdkSourceOption: 'PreInstalled'
                displayName: 'Set default Java to x64'
              - task: Bash@3
                displayName: 'Run Android E2E Tests'
                inputs:
                  targetType: inline
                  script: 'chmod u+x ./gradlew && chmod u+x e2eTest.sh && ./e2eTest.sh'
                  workingDirectory: '$(Agent.BuildDirectory)/androidHost/apps/orangeandroid'
              - task: PublishTestResults@2
                displayName: 'Publish Test Results'
                inputs:
                  testResultsFiles: '**/TEST-*.xml'
                  failTaskOnFailedTests: false
                  testRunTitle: 'E2E Tests - Android'
                  searchFolder: '$(Agent.BuildDirectory)/androidHost'
                  mergeTestResults: true
                condition: or(succeededOrFailed(), eq(variables['Agent.JobStatus'], 'Canceled'))
          - job: E2ETestIOS
            displayName: 'E2E Test - IOS'
            pool:
              name: Azure Pipelines
              image: internal-macos12
              os: macOS
            steps:
              - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
                inputs:
                  repository: self
              - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
                inputs:
                  repository: IOSAppHostingSdk
                  path: iOSHost
                  persistCredentials: true
              - task: InstallSSHKey@0
                displayName: 'Install an SSH key for OneDSTelemetry'
                inputs:
                  knownHostsEntry: 'github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg='
                  sshPublicKey: '$(OneDSTelemetryKey)'
                  sshKeySecureFile: 'ios_host_sdk_dev_1ds_key'
              - task: Bash@3
                displayName: Install Cocoapods
                inputs:
                  targetType: inline
                  script: |
                    sudo gem install cocoapods
                  workingDirectory: '$(Agent.BuildDirectory)/iOSHost'
              - task: Bash@3
                displayName: Run Cocoapods - pod install
                inputs:
                  targetType: inline
                  script: |
                    pod install > /dev/null
                  workingDirectory: '$(Agent.BuildDirectory)/iOSHost'
              - task: Bash@3
                displayName: 'Install XCTestHtmlReport for publishing result'
                inputs:
                  targetType: inline
                  script: |
                    brew install xctesthtmlreport
                  workingDirectory: '$(System.DefaultWorkingDirectory)'
              - task: NodeTool@0
                inputs:
                  versionSpec: '14.x'
                displayName: 'Install Node.js'
              - task: Cache@2
                inputs:
                  key: 'pnpm | "$(Agent.OS)" | $(ClientSdkProjectDirectory)/pnpm-lock.yaml'
                  path: $(Pipeline.Workspace)/.pnpm-store
                displayName: Cache pnpm
              - task: CmdLine@2
                displayName: 'Setup pnpm'
                inputs:
                  script: |
                    corepack enable
                    corepack prepare pnpm@7.30.1 --activate
                    pnpm config set store-dir $(Pipeline.Workspace)/.pnpm-store
              - task: CmdLine@2
                displayName: 'Install client sdk dependencies'
                inputs:
                  script: |
                    pnpm install
                  workingDirectory: '$(ClientSdkProjectDirectory)'
              - task: CmdLine@2
                displayName: 'Build client sdk'
                inputs:
                  script: |
                    pnpm build-force-blazor
                  workingDirectory: '$(ClientSdkProjectDirectory)'
              - task: Bash@3
                displayName: 'Run sample test app in background'
                inputs:
                  targetType: inline
                  script: 'nohup pnpm start-test-app &'
                  workingDirectory: '$(ClientSdkProjectDirectory)'
              - task: Bash@3
                displayName: 'Disable Slow Animation'
                inputs:
                  targetType: inline
                  script: cd ~/Library/Preferences defaults write com.apple.iphonesimulator SlowMotionAnimation -bool NO
                  workingDirectory: '$(System.DefaultWorkingDirectory)'
              - task: Bash@3
                displayName: 'iOS UI/E2E Tests'
                inputs:
                  targetType: inline
                  script: "/usr/bin/xcodebuild -configuration Release -workspace /Users/runner/work/1/iOSHost/$(IOSSdkWorkspace).xcworkspace -scheme $(IOSSdkScheme) -sdk iphonesimulator -parallel-testing-enabled YES -parallel-testing-worker-count 2 -destination 'platform=iOS Simulator,name=iPhone 14 Pro,OS=16.2' -screenshot-enabled=\"YES\" -quiet -resultBundlePath TestResults test 2>/dev/null\nif [[ $? == 0 ]]; then echo \"E2E Test passes successfully\"; exit 0; else echo \"E2E Test failed\"; exit 1; fi;"
                  workingDirectory: '$(Agent.BuildDirectory)/iOSHost'
              - task: Bash@3
                displayName: 'Generate E2E test report'
                condition: succeededOrFailed()
                inputs:
                  targetType: inline
                  script: |
                    xchtmlreport -r TestResults -j; if [[ $? == 0 ]]; then echo "Test report has been generated successfully."; exit 0; else echo "Test report generating process failed for some reasons."; exit 1; fi;
                  workingDirectory: '$(Agent.BuildDirectory)/iOSHost'
              - task: PublishTestResults@2
                displayName: 'Publish Test Results'
                inputs:
                  testResultsFiles: '**/*.junit'
                  failTaskOnFailedTests: false
                  testRunTitle: 'E2E Tests - iOS'
                  searchFolder: '$(Agent.BuildDirectory)/iOSHost'
                  mergeTestResults: true
                condition: always()
