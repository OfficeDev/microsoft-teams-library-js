# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
variables:
  - group: InfoSec-SecurityResults

trigger:
  branches:
    include:
      - '2.0-preview'
  tags:
    include:
      - v2.0.0-beta.*

jobs:
  - job:
    displayName: 'Security Tasks'
    pool:
      vmImage: 'windows-latest'
    steps:
      - template: tools/yaml/security.yml

  - job:
    displayName: 'Build Test Publish'
    pool:
      vmImage: 'windows-latest'
    steps:
      - template: tools/yaml/build-test-publish.yml

  - job: E2ETest1
    displayName: 'E2E Test (Perf)'
    variables:
      appHostGitPath1: git://$(AppHostingSdkGitPath)@$(AppHostingSdkGitRef)
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - template: tools/yaml/build-app-host.yml
        parameters:
          appHostGitPath: ${{variables.appHostGitPath1}}

      - bash: 'node tools/cli/runAppsWithE2ETests.js --appUrl=https://localhost:4002 --reportFileName=e2e-tests-report-perf --envType=perf'
        displayName: 'Run E2E Perf tests'
        condition: succeeded()
        workingDirectory: '$(AppHostingSdkProjectDirectory)'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/e2e-tests-report*.xml'
        condition: succeededOrFailed()

  - job: E2ETest2
    displayName: 'E2E Test (Default)'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - template: tools/yaml/build-app-host.yml
        parameters:
          appHostGitPath: git://$(AppHostingSdkGitPath2)@$(AppHostingSdkGitRef)

      - bash: 'node tools/cli/runAppsWithE2ETests.js'
        displayName: 'Run E2E integration tests'
        condition: succeeded()
        workingDirectory: '$(AppHostingSdkProjectDirectory)'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/e2e-tests-report*.xml'
        condition: succeededOrFailed()

  - job: E2ETest3
    displayName: 'E2E Test (Local Tag)'
    variables:
      appHostGitPath3: git://$(AppHostingSdkGitPath)@$(AppHostingSdkGitRef)
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - template: tools/yaml/build-app-host.yml
        parameters:
          appHostGitPath: ${{variables.appHostGitPath3}}

      - bash: 'node tools/cli/runAppsWithE2ETests.js --reportFileName=e2e-tests-report-local-script-tag --envType=--envType=localScriptTag'
        displayName: 'Run E2E integration tests with local script tag'
        condition: succeeded()
        workingDirectory: '$(AppHostingSdkProjectDirectory)'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/e2e-tests-report*.xml'
        condition: succeededOrFailed()
  # - job: E2ETest4
  #   displayName: 'E2E Test (TeamsJS V1)'
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   steps:
  #     - template: tools/yaml/build-app-host.yml
  #     - bash: 'node tools/cli/runAppsWithE2ETests.js --reportFileName=e2e-tests-report-V1 --envType=--envType=teamsV1'
  #       displayName: 'Run E2E integration tests on Teams Test App V1'
  #       condition: succeeded()
  #       workingDirectory: '$(AppHostingSdkProjectDirectory)'
  #     - task: PublishTestResults@2
  #       inputs:
  #         testResultsFormat: 'JUnit'
  #         testResultsFiles: '**/e2e-tests-report*.xml'
  #       condition: succeededOrFailed()
