# This does all the steps for cloning both app sdk and app host sdk repos and building them, then configuring the app host.
# Can be reused for any additional e2e tests and then paired with a node script with different parameters for which type of e2e test needs to run.

parameters:
  - name: 'appHostGitPath'
    default: none
    type: string

steps:
  - checkout: self
  - checkout: ${{ parameters.appHostGitPath }}
    persistCredentials: true

  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install Node.js'

  # Cache task is used to create a cache of files which won't change between jobs, task, or steps.
  # In this task below a unique identifier(fingerprint) is created for the cache name, usually it's
  #   'command_name | operating_system | lockfile'
  # in our case it is 'pnpm | "$(Agent.OS)" | $(AppHostingSdkProjectDirectory)/pnpm-lock.yaml'
  # and for the path is the directory which needs to be cached.
  # Here `node_modules` are cached which are dowloaded from the scoped/private registry to build the mono-repo.
  - task: Cache@2
    inputs:
      key: 'pnpm_v1 | "$(Agent.OS)" | $(AppHostingSdkProjectDirectory)/pnpm-lock.yaml'
      path: $(Pipeline.Workspace)/.pnpm-store
    displayName: Cache app host node_modules pnpm

  - task: Cache@2
    inputs:
      key: 'pnpm_v1 | "$(Agent.OS)" | $(ClientSdkProjectDirectory)/pnpm-lock.yaml'
      path: $(Pipeline.Workspace)/.pnpm-store
    displayName: Cache client sdk node_modules pnpm

  - script: |
      corepack enable
      corepack prepare pnpm@7.30.1 --activate
      pnpm config set store-dir $(Pipeline.Workspace)/.pnpm-store
    displayName: 'Setup pnpm'

  # Cypress needs to run a post_install script, when `node_modules` are cached, therefore the cypress binary file
  # should be cached, as cypress doesn't supports running post_install script after node_modules are cached.
  # The below task caches the Cypress binary.
  - task: Cache@2
    inputs:
      key: 'cy_v1 | "$(Agent.OS)" | $(AppHostingSdkProjectDirectory)/pnpm-lock.yaml'
      path: /home/vsts/.cache/Cypress
      cacheHitVar: CYPRESS_CACHE_RESTORED
    displayName: 'Cache Cypress binary'

  - task: npmAuthenticate@0
    inputs:
      workingFile: '$(AppHostingSdkProjectDirectory)/.npmrc'

  # Below script task checks if Cypress cache is hit or not.
  # If Cypress cache is found skip cypress install.
  - script: |
      CYPRESS_INSTALL_BINARY=0 pnpm install --frozen-lockfile
    displayName: Install app hosting dependencies (skip Cypress install)
    workingDirectory: '$(AppHostingSdkProjectDirectory)'
    condition: eq(variables.CYPRESS_CACHE_RESTORED, 'true')

  # If Cypress cache is not found include cypress install.
  - script: |
      rm -rf $(pnpm store path)
      pnpm install --frozen-lockfile
    displayName: Install app hosting dependencies (include Cypress install)
    workingDirectory: '$(AppHostingSdkProjectDirectory)'
    condition: eq(variables.CYPRESS_CACHE_RESTORED, 'false')

  - script: |
      pnpm build
    displayName: 'Build app hosting sdk'
    workingDirectory: '$(AppHostingSdkProjectDirectory)'

  - script: |
      pnpm install
    displayName: 'Install client sdk dependencies'
    workingDirectory: '$(ClientSdkProjectDirectory)'

  - script: |
      pnpm build-force-blazor
    displayName: 'Build client sdk'
    workingDirectory: '$(ClientSdkProjectDirectory)'

  - task: CmdLine@2
    displayName: 'Configure host machine'
    inputs:
      script: |
        sudo chmod -R 755 ./ 
        pnpm run setup
      workingDirectory: '$(AppHostingSdkProjectDirectory)'
