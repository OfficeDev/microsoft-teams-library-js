# This does all the steps for cloning both app sdk and app host sdk repos and building them, then configuring the app host.
# Can be reused for any additional e2e tests and then paired with a node script with different parameters for which type of e2e test needs to run.

parameters:
  - name: AppHostingSdk
    default: none
    type: string
  - name: hostingEnvironmentType
    type: string
    values:
      - 'electron'
      - 'standardWeb'
  - name: testPrefixPattern
    type: string
    default: '{[A-Z],[a-z],[0-9]}'
steps:
  - template: build-app-host.yml
    parameters:
      appHostGitPath: AppHostingSdk

  - bash: 'node tools/cli/runAppsWithE2ETests.js --useDataFromLocal=true --testPrefixPattern "${{parameters.testPrefixPattern}}"'
    displayName: 'Run E2E integration tests (${{parameters.testPrefixPattern}})'
    condition: and(succeeded(), eq('${{ parameters.hostingEnvironmentType }}', 'standardWeb'))
    workingDirectory: '$(AppHostingSdkProjectDirectory)'

  - bash: |
      # This sets up the server but runs no tests
      node tools/cli/runAppsWithE2ETests.js --useDataFromLocal=true --testPrefixPattern "${{parameters.testPrefixPattern}}"
      # This runs the Electron tests, which currently cannot be filtered
      pnpm exec xvfb-maybe playwright test
    displayName: 'Run tests for electron webview'
    condition: and(succeeded(), eq('${{ parameters.hostingEnvironmentType }}', 'electron'))
    workingDirectory: '$(AppHostingSdkProjectDirectory)'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/e2e-tests-report*.xml'
      testRunTitle: 'E2E Tests - Default'
      mergeTestResults: true
    condition: succeededOrFailed()
